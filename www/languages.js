// Generated by CoffeeScript 1.4.0
(function() {
  var average, background, best, byLanguage, flatten, getX, getX0, getY, getY0, h, lang, languagesByX, languagesByXThenY, languagesByY, margin_h, margin_w, matrixValues, rect, rollup, row_count, setX, setY, title_f, title_h, type, types, w, x, x_column, y, y_column;

  w = 40;

  h = 40;

  margin_w = 40;

  margin_h = 10;

  title_h = 15;

  title_f = 10;

  row_count = 5;

  x_column = "cpu(s)";

  y_column = "size(B)";

  lang = function(d) {
    return d.lang;
  };

  getX = function(d) {
    return d[x_column];
  };

  getY = function(d) {
    return d[y_column];
  };

  setX = function(d, x) {
    return d[x_column] = x;
  };

  setY = function(d, y) {
    return d[y_column] = y;
  };

  x = d3.scale.sqrt().rangeRound([0, w]);

  y = d3.scale.sqrt().rangeRound([h, 0]);

  getX0 = function(d) {
    return x(getX(d));
  };

  getY0 = function(d) {
    return y(getY(d));
  };

  background = d3.scale.ordinal().domain(['imperative', 'oo', 'functional', 'scripting']).range(['#6da', '#97e', '#fe7', '#fa7']);

  types = {
    'C gcc': 'imperative',
    'Pascal Free Pascal': 'imperative',
    'Go': 'imperative',
    'Fortran Intel': 'imperative',
    'C++ g++': 'oo',
    'Scala': 'oo',
    'Smalltalk VisualWorks': 'oo',
    'Ada 2005 GNAT': 'oo',
    'Java 7': 'oo',
    'C# Mono': 'oo',
    'Dart': 'oo',
    'ATS': 'functional',
    'OCaml': 'functional',
    'F# Mono': 'functional',
    'Erlang HiPE': 'functional',
    'Lisp SBCL': 'functional',
    'Haskell GHC': 'functional',
    'Clojure': 'functional',
    'Racket': 'functional',
    'Lua': 'scripting',
    'PHP': 'scripting',
    'Python 3': 'scripting',
    'Ruby 2.0': 'scripting',
    'JavaScript V8': 'scripting',
    'Ruby JRuby': 'scripting',
    'Perl': 'scripting'
  };

  type = function(d) {
    return background(types[d.lang]);
  };

  rollup = function(k, f) {
    return d3.nest().key(function(d) {
      return d[k];
    }).rollup(function(v) {
      var m;
      m = {};
      setX(m, d3[f](v, getX));
      setY(m, d3[f](v, getY));
      return m;
    });
  };

  average = rollup('lang', 'mean');

  best = rollup('name', 'min');

  byLanguage = d3.nest().key(lang);

  languagesByX = d3.nest().key(getX).sortKeys(function(a, b) {
    return d3.ascending(parseFloat(a), parseFloat(b));
  });

  languagesByY = d3.nest().key(getY).sortKeys(function(a, b) {
    return d3.descending(parseFloat(a), parseFloat(b));
  });

  matrixValues = function(cols) {
    var cell, col, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = cols.length; _i < _len; _i++) {
      col = cols[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = col.length; _j < _len1; _j++) {
          cell = col[_j];
          _results1.push(cell.values[0]);
        }
        return _results1;
      })());
    }
    return _results;
  };

  languagesByXThenY = function(a) {
    var byX, col, cols, end, i;
    byX = languagesByX.entries(a);
    end = function(i) {
      return Math.min(byX.length - 1, i + row_count);
    };
    cols = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = byX.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = _i += row_count) {
        _results.push(byX.slice(i, end(i)));
      }
      return _results;
    })();
    cols = matrixValues(cols);
    return matrixValues((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = cols.length; _i < _len; _i++) {
        col = cols[_i];
        _results.push(languagesByY.entries(col));
      }
      return _results;
    })());
  };

  flatten = function(lng, avg) {
    var m;
    m = {};
    m.lang = lng;
    setX(m, getX(avg));
    setY(m, getY(avg));
    return m;
  };

  rect = function(c, s, f) {
    return c.append("rect").attr("width", w).attr("height", h).attr("stroke", s).attr("fill", f);
  };

  d3.csv("data.csv", function(data) {
    var averages, avg, clip, col, d, flat_averages, focus, lang_benches, layout, lines, lng, mins, star, svg, update, _i, _j, _len, _len1;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      d = data[_i];
      setX(d, parseFloat(getX(d)));
      setY(d, parseFloat(getY(d)));
    }
    mins = best.map(data);
    for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
      d = data[_j];
      setX(d, getX(d) / getX(mins[d.name]));
      setY(d, getY(d) / getY(mins[d.name]));
    }
    x.domain([0, 5000]);
    y.domain([1, 6]);
    averages = average.map(data);
    flat_averages = (function() {
      var _results;
      _results = [];
      for (lng in averages) {
        avg = averages[lng];
        _results.push(flatten(lng, avg));
      }
      return _results;
    })();
    layout = languagesByXThenY(flat_averages);
    lang_benches = byLanguage.map(data);
    col = d3.select("#viz").selectAll(".col").data(layout).enter().append("div").classed("col", function() {
      return true;
    });
    svg = col.selectAll("svg").data(function(d) {
      return d;
    }).enter().append("svg").attr("width", w + margin_w + margin_w).attr("height", h + margin_h + margin_h + title_h).append("g").attr("transform", "translate(" + margin_w + "," + (margin_h + title_h) + ")");
    svg.append("title").text(lang);
    svg.append("text").attr("x", w / 2).attr("y", -4).style("font-size", title_f).attr("text-anchor", "middle").text(lang);
    clip = svg.append("defs").append("clipPath").attr("id", "clip");
    rect(clip, "none", "none");
    focus = svg.append("g").attr("clip-path", "url(#clip)");
    rect(focus, "none", type);
    star = focus.append("g").classed("star", function() {
      return true;
    }).attr("transform", function(d) {
      avg = averages[d.lang];
      return "translate(" + (getX0(avg)) + "," + (getY0(avg)) + ")";
    });
    lines = star.selectAll("path").data(function(d) {
      return lang_benches[d.lang];
    }).enter().append("path").attr("stroke", "#555");
    update = function() {
      return lines.transition().attr("d", function(d) {
        var cx, cy;
        avg = averages[d.lang];
        cx = getX0(d) - getX0(avg);
        cy = getY0(d) - getY0(avg);
        return "M 0 0 L " + cx + " " + cy;
      });
    };
    update();
    rect(focus, "#444", "none");
    module.exports = update;
    module.exports.x = x;
    return module.exports.y = y;
  });

}).call(this);
