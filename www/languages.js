// Generated by CoffeeScript 1.4.0
(function() {
  var CategoryStars, myStars;

  CategoryStars = (function() {

    function CategoryStars(width, height) {
      var _ref, _ref1;
      this.width = width;
      this.height = height;
      if ((_ref = this.width) == null) {
        this.width = 40;
      }
      if ((_ref1 = this.height) == null) {
        this.height = 40;
      }
      this.row_count = 5;
      this.container = "#viz";
      this.x_column = "cpu(s)";
      this.y_column = "size(B)";
      this.scaleX.rangeRound([0, this.width]);
      this.scaleY.rangeRound([this.height, 0]);
      this.average = this.rollup('lang', 'mean');
      this.best = this.rollup('name', 'min');
      this.languagesByX.key(this.x());
      this.languagesByY.key(this.y());
    }

    CategoryStars.prototype.scaleX = d3.scale.sqrt();

    CategoryStars.prototype.scaleY = d3.scale.sqrt();

    CategoryStars.prototype.lang = function(d) {
      return d.lang;
    };

    CategoryStars.prototype.getX = function(d) {
      return d[this.x_column];
    };

    CategoryStars.prototype.getY = function(d) {
      return d[this.y_column];
    };

    CategoryStars.prototype.x = function() {
      var t;
      t = this;
      return function(d) {
        return t.getX(d);
      };
    };

    CategoryStars.prototype.y = function() {
      var t;
      t = this;
      return function(d) {
        return t.getY(d);
      };
    };

    CategoryStars.prototype.setX = function(d, x) {
      return d[this.x_column] = x;
    };

    CategoryStars.prototype.setY = function(d, y) {
      return d[this.y_column] = y;
    };

    CategoryStars.prototype.getX0 = function(d) {
      return this.scaleX(this.getX(d));
    };

    CategoryStars.prototype.getY0 = function(d) {
      return this.scaleY(this.getY(d));
    };

    CategoryStars.prototype.typeColor = d3.scale.ordinal().domain(['imperative', 'oo', 'functional', 'scripting']).range(['#6da', '#97e', '#fe7', '#fa7']);

    CategoryStars.prototype.background = function() {
      var t;
      t = this;
      return function(d) {
        return t.typeColor(types[d.lang]);
      };
    };

    CategoryStars.prototype.rect = function(c) {
      return c.append("rect").attr("width", this.width).attr("height", this.height);
    };

    CategoryStars.prototype.flatten = function(lng, avg) {
      var m;
      m = {};
      m.lang = lng;
      this.setX(m, this.getX(avg));
      this.setY(m, this.getY(avg));
      return m;
    };

    CategoryStars.prototype.rollup = function(k, f) {
      return d3.nest().key(function(d) {
        return d[k];
      }).rollup(this.rollupFunction(f));
    };

    CategoryStars.prototype.rollupFunction = function(f) {
      var t;
      t = this;
      return function(v) {
        var m;
        m = {};
        t.setX(m, d3[f](v, myStars.x()));
        t.setY(m, d3[f](v, myStars.y()));
        return m;
      };
    };

    CategoryStars.prototype.clean = function(data) {
      var d, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        d = data[_i];
        this.setX(d, parseFloat(this.getX(d)));
        _results.push(this.setY(d, parseFloat(this.getY(d))));
      }
      return _results;
    };

    CategoryStars.prototype.relativize = function(data) {
      var d, mins, _i, _len;
      mins = this.best.map(data);
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        d = data[_i];
        this.setX(d, this.getX(d) / this.getX(mins[d.name]));
        this.setY(d, this.getY(d) / this.getY(mins[d.name]));
      }
      this.scaleX.domain([0, 5000]);
      return this.scaleY.domain([1, 6]);
    };

    CategoryStars.prototype.doAverage = function(data) {
      var avg, lng;
      this.averages = this.average.map(data);
      return this.flat_averages = (function() {
        var _ref, _results;
        _ref = this.averages;
        _results = [];
        for (lng in _ref) {
          avg = _ref[lng];
          _results.push(this.flatten(lng, avg));
        }
        return _results;
      }).call(this);
    };

    CategoryStars.prototype.spoke = function() {
      var t;
      t = this;
      return function(d) {
        var avg, cx, cy;
        avg = t.averages[d.lang];
        cx = t.getX0(d) - t.getX0(avg);
        cy = t.getY0(d) - t.getY0(avg);
        return "M 0 0 L " + cx + " " + cy;
      };
    };

    CategoryStars.prototype.centerStar = function() {
      var t;
      t = this;
      return function(d) {
        var avg;
        avg = t.averages[d.lang];
        return "translate(" + (t.getX0(avg)) + "," + (t.getY0(avg)) + ")";
      };
    };

    CategoryStars.prototype.drawBackground = function(focus) {
      return this.rect(focus).attr("fill", this.background());
    };

    CategoryStars.prototype.drawBorder = function(focus) {
      return this.rect(focus).classed('border', function() {
        return true;
      });
    };

    CategoryStars.prototype.benchmarksForLanguage = function() {
      var t;
      t = this;
      return function(d) {
        return t.lang_benches[d.lang];
      };
    };

    CategoryStars.prototype.drawLines = function(star) {
      var t;
      t = this;
      return star.selectAll("path").data(this.benchmarksForLanguage()).enter().append("path").attr("d", this.spoke());
    };

    CategoryStars.prototype.drawStar = function(focus) {
      var star;
      star = focus.append("g").classed("star", function() {
        return true;
      }).attr("transform", this.centerStar());
      return this.drawLines(star);
    };

    CategoryStars.prototype.sortByLanguage = function(data) {
      return this.lang_benches = d3.nest().key(function(d) {
        return d.lang;
      }).map(data);
    };

    CategoryStars.prototype.languagesByX = d3.nest().sortKeys(function(a, b) {
      return d3.ascending(parseFloat(a), parseFloat(b));
    });

    CategoryStars.prototype.languagesByY = d3.nest().sortKeys(function(a, b) {
      return d3.descending(parseFloat(a), parseFloat(b));
    });

    CategoryStars.prototype.matrixValues = function(cols) {
      var cell, col, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = cols.length; _i < _len; _i++) {
        col = cols[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = col.length; _j < _len1; _j++) {
            cell = col[_j];
            _results1.push(cell.values[0]);
          }
          return _results1;
        })());
      }
      return _results;
    };

    CategoryStars.prototype.languagesByXThenY = function() {
      var byX, chunk, col, cols, end, i;
      chunk = this.row_count;
      byX = this.languagesByX.entries(this.flat_averages);
      end = function(i) {
        return Math.min(byX.length - 1, i + chunk);
      };
      cols = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = byX.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = _i += chunk) {
          _results.push(byX.slice(i, end(i)));
        }
        return _results;
      })();
      cols = this.matrixValues(cols);
      return this.matrixValues((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = cols.length; _i < _len; _i++) {
          col = cols[_i];
          _results.push(this.languagesByY.entries(col));
        }
        return _results;
      }).call(this));
    };

    CategoryStars.prototype.layoutColumns = function() {
      return d3.select(this.container).selectAll(".col").data(this.languagesByXThenY()).enter().append("div").classed("col", function() {
        return true;
      });
    };

    CategoryStars.prototype.layoutCells = function(col) {
      return smallMultiples(col, {
        width: this.width,
        height: this.height,
        margin: {
          left: 40,
          right: 40,
          top: 10,
          bottom: 10
        },
        title: {
          size: 10,
          padding: 5,
          data: this.lang
        }
      });
    };

    CategoryStars.prototype.createLayout = function() {
      return this.layoutCells(this.layoutColumns());
    };

    CategoryStars.prototype.draw = function(data) {
      var focus;
      this.clean(data);
      this.relativize(data);
      this.doAverage(data);
      this.sortByLanguage(data);
      focus = this.createLayout();
      this.drawBackground(focus);
      this.drawStar(focus);
      return this.drawBorder(focus);
    };

    return CategoryStars;

  })();

  myStars = new CategoryStars;

  d3.csv("data.csv", function(data) {
    return myStars.draw(data);
  });

}).call(this);
